pipeline {
		environment { 
			dockerImage = ''
		}
		
		agent any 
		
		stages {
			stage('GitHub Repository Clone') { 
				steps {
				  
					git branch: 'frontend', credentialsId: 'git-access-token', url: 'https://lab.ssafy.com/s11-bigdata-dist-sub1/S11P21B207.git'
				  
				}
			}
			
			stage('Build image') {
				steps {
					script {
						dockerimage = docker.build("jiyoungheo/tokime-front:v1", "./front-end/tokime")
					}
				}
			}
			
			stage('Push image') {
				steps {
					script {
						withDockerRegistry(credentialsId: 'dockerhub-accesstoken') {
							dockerimage.push()
						}
					}
				}
			}

			stage('EC2 connect') {
				steps {
					sshagent(['ssh-key']) {
					    withCredentials([string(credentialsId: 'dockerhub-password', variable: 'DOCKERHUB_PASSWORD')]) {
						sh """
							ssh -o StrictHostKeyChecking=no ubuntu@j11b207.p.ssafy.io '
							docker stop tokime-front
							docker rm tokime-front
							docker rmi jiyoungheo/tokime-front:v1
							docker login -u jiyoungheo.dev@gmail.com -p $DOCKERHUB_PASSWORD
							docker pull jiyoungheo/tokime-front:v1
							docker run -d -p 3000:3000 -v /home/ubuntu/tokime/frontend/.env:/app/.env --name tokime-front jiyoungheo/tokime-front:v1
							'
						"""
					    }
					}
				}
			}
		}
		post {
        success {
        	script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'good', 
                message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)", 
                endpoint: 'https://meeting.ssafy.com/hooks/rur579kjapnq9jar7bcf1z3dpy', 
                channel: 'b207_gitlab'
                )
            }
        }
        failure {
        	script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'danger', 
                message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)", 
                endpoint: 'https://meeting.ssafy.com/hooks/rur579kjapnq9jar7bcf1z3dpy', 
                channel: 'b207_gitlab'
                )
            }
        }
    }
}
